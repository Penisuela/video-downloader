import sys
import os
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                           QHBoxLayout, QLineEdit, QPushButton, QLabel, 
                           QScrollArea, QFrame, QProgressBar, QGridLayout, QMessageBox, QFileDialog)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QSize, QTimer, QRectF, QByteArray, QUrl
from PyQt6.QtGui import QFont, QIcon, QMovie, QPixmap, QPainter, QPen, QColor, QPainterPath
from PyQt6.QtSvg import QSvgRenderer
from PyQt6.QtNetwork import QNetworkAccessManager, QNetworkRequest
import yt_dlp
import re
from youtube_downloader import validate_url
import json
import urllib.request
import requests

def load_svg_with_color(path, size, color="white"):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(path):
            print(f"File not found: {path}")
            return None

        # –ß–∏—Ç–∞–µ–º SVG —Ñ–∞–π–ª
        with open(path, 'r') as file:
            svg_content = file.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ SVG
        if 'fill="' in svg_content:
            svg_content = re.sub('fill="[^"]*"', f'fill="{color}"', svg_content)
        else:
            svg_content = svg_content.replace('<svg', f'<svg fill="{color}"')
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –∏ pixmap
        renderer = QSvgRenderer()
        if not renderer.load(bytes(svg_content, encoding='utf-8')):
            print(f"Failed to load SVG content for {path}")
            return None
        
        pixmap = QPixmap(size)
        pixmap.fill(Qt.GlobalColor.transparent)
        
        # –†–∏—Å—É–µ–º SVG –Ω–∞ pixmap
        painter = QPainter(pixmap)
        renderer.render(painter)
        painter.end()
        
        return pixmap
    except Exception as e:
        print(f"Error loading SVG {path}: {str(e)}")
        return None

class LoadingSpinner(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.angle = 0
        self.timer = QTimer()
        self.timer.timeout.connect(self.rotate)
        self.setFixedSize(24, 24)
        self.hide()

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)

        pen = QPen()
        pen.setWidth(2)
        pen.setColor(QColor("#FFFFFF"))
        painter.setPen(pen)

        rect = QRectF(2, 2, self.width() - 4, self.height() - 4)
        # –†–∏—Å—É–µ–º –¥—É–≥—É –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
        painter.drawArc(rect, (90 - self.angle) * 16, -300 * 16)

    def rotate(self):
        self.angle = (self.angle + 10) % 360
        self.update()

    def start(self):
        self.show()
        self.timer.start(30)

    def stop(self):
        self.timer.stop()
        self.hide()

class SearchButton(QPushButton):
    def __init__(self, parent=None):
        super().__init__("–ü–æ–∏—Å–∫", parent)
        self.setFixedWidth(100)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
        self.spinner = LoadingSpinner(self)
        self.spinner.hide()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ
        self.updateSpinnerPosition()

    def resizeEvent(self, event):
        super().resizeEvent(event)
        self.updateSpinnerPosition()

    def updateSpinnerPosition(self):
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ
        x = (self.width() - self.spinner.width()) // 2
        y = (self.height() - self.spinner.height()) // 2
        self.spinner.move(x, y)

    def startLoading(self):
        self.setText("")  # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
        self.spinner.start()

    def stopLoading(self):
        self.spinner.stop()
        self.setText("–ü–æ–∏—Å–∫")

def resolve_tiktok_url(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π URL –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ TikTok"""
    try:
        response = requests.head(url, allow_redirects=True)
        return response.url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")
        return url

def clean_tiktok_url(url):
    """–û—á–∏—â–∞–µ—Ç URL TikTok –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL
    if 'vt.tiktok.com' in url:
        url = resolve_tiktok_url(url)
        
    # –ò—â–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
    photo_match = re.search(r'(https?://(?:www\.)?tiktok\.com/@[^/]+/photo/\d+)', url)
    video_match = re.search(r'(https?://(?:www\.)?tiktok\.com/@[^/]+/video/\d+)', url)
    username_match = re.search(r'(https?://(?:www\.)?tiktok\.com/@[^/\?]+)', url)
    
    if photo_match:
        return photo_match.group(1)
    elif video_match:
        return video_match.group(1)
    elif username_match:
        return username_match.group(1)
    
    return url

def validate_url(url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ URL –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ YouTube, TikTok –∏–ª–∏ Instagram"""
    youtube_pattern = r'^(https?://)?(www\.)?(youtube\.com/watch\?v=|youtu\.be/)[a-zA-Z0-9_-]+(\S*)?$'
    tiktok_pattern = r'^(https?://)?((?:www\.|vm\.|vt\.)?tiktok\.com/[^\s]+)$'
    instagram_pattern = r'^(https?://)?((?:www\.)?instagram\.com/(?:p|reel|tv|reels|stories)/[a-zA-Z0-9_-]+(?:/\?.*)?|instagram\.com/[^/]+/[^/]+)$'
    
    return bool(re.match(youtube_pattern, url) or 
                re.match(tiktok_pattern, url) or 
                re.match(instagram_pattern, url))

def get_tiktok_photo_info(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ TikTok"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏ photo_id –∏–∑ URL
        match = re.search(r'@([^/]+)/photo/(\d+)', url)
        if not match:
            raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            
        username, photo_id = match.groups()
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        return {
            'title': f'Photo by @{username}',
            'uploader': username,
            'id': photo_id,
            'webpage_url': url,
            'extractor': 'TikTok',
            'extractor_key': 'TikTok',
            '_type': 'photo',
            'thumbnails': [{
                'url': url,
                'id': 'photo'
            }]
        }
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ: {str(e)}")

class SearchThread(QThread):
    finished = pyqtSignal(dict)
    error = pyqtSignal(str)

    def __init__(self, url):
        super().__init__()
        self.url = url

    def run(self):
        try:
            # –û—á–∏—â–∞–µ–º URL –µ—Å–ª–∏ —ç—Ç–æ TikTok
            if 'tiktok.com' in self.url:
                cleaned_url = clean_tiktok_url(self.url)
                print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL: {self.url}")
                print(f"–û—á–∏—â–µ–Ω–Ω—ã–π URL: {cleaned_url}")
                self.url = cleaned_url
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
                if '/photo/' in self.url:
                    info = get_tiktok_photo_info(self.url)
                    self.finished.emit(info)
                    return
            
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False,
                'socket_timeout': 30,
            }
            
            # –î–ª—è TikTok –∏ Instagram –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            if 'tiktok.com' in self.url or 'instagram.com' in self.url:
                ydl_opts.update({
                    'format': 'best',  # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                    'extract_flat': True,  # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                })
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(self.url, download=False)
                self.finished.emit(info)
        except Exception as e:
            error_msg = str(e)
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {error_msg}")
            self.error.emit(error_msg)

    def update_info(self, info):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
        if not info:
            return
            
        self.title.setText(info.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
        def format_number(num):
            if num >= 1000000:
                return f"{num/1000000:.1f}M"
            elif num >= 1000:
                return f"{num/1000:.1f}K"
            return str(num)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.author_label.setText(f"üë§ {info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        self.views_label.setText(f"üëÅÔ∏è {format_number(info.get('view_count', 0))}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ TikTok –≤–∏–¥–µ–æ
        is_tiktok = 'tiktok.com' in info.get('webpage_url', '').lower()
        
        if is_tiktok:
            # –î–ª—è TikTok –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            track = info.get('track', '')
            if track:
                self.subscribers_label.setText(f"üéµ {track}")
            else:
                self.subscribers_label.setText("üéµ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–≤—É–∫")
        else:
            # –î–ª—è YouTube –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            self.subscribers_label.setText(f"üë• {format_number(info.get('channel_follower_count', 0))}")
        
        self.likes_label.setText(f"üëç {format_number(info.get('like_count', 0))}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        duration = info.get('duration', 0)
        minutes = int(duration // 60)
        seconds = int(duration % 60)
        duration_str = f"{minutes}:{seconds:02d}"
        self.duration_label.setText(f"‚è±Ô∏è {duration_str}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        upload_date = info.get('upload_date', '')
        if upload_date and len(upload_date) == 8:
            year = upload_date[:4]
            month = upload_date[4:6]
            day = upload_date[6:]
            self.date_label.setText(f"üìÖ {day}.{month}.{year}")
        else:
            self.date_label.setText("üìÖ –î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é
        if is_tiktok:
            # –î–ª—è TikTok –∏—Å–ø–æ–ª—å–∑—É–µ–º thumbnail –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            thumbnails = info.get('thumbnails', [])
            if thumbnails:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π thumbnail (–æ–±—ã—á–Ω–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
                thumbnail_url = thumbnails[-1].get('url')
                if thumbnail_url:
                    if self.thumbnail_loader is not None:
                        self.thumbnail_loader.quit()
                    self.thumbnail_loader = ThumbnailLoader(thumbnail_url)
                    self.thumbnail_loader.thumbnail_loaded.connect(self.set_thumbnail)
                    self.thumbnail_loader.start()
        else:
            # –î–ª—è YouTube –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            if 'id' in info:
                video_id = info['id']
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–µ–≤—å—é
                thumbnail_urls = [
                    f"https://i.ytimg.com/vi/{video_id}/maxresdefault.jpg",
                    f"https://i.ytimg.com/vi/{video_id}/hqdefault.jpg",
                    f"https://i.ytimg.com/vi/{video_id}/mqdefault.jpg"
                ]
                
                if self.thumbnail_loader is not None:
                    self.thumbnail_loader.quit()
                self.thumbnail_loader = ThumbnailLoader(thumbnail_urls[0])  # –ù–∞—á–∏–Ω–∞–µ–º —Å maxresdefault
                self.thumbnail_loader.thumbnail_loaded.connect(self.set_thumbnail)
                self.thumbnail_loader.start()

class DownloadThread(QThread):
    progress = pyqtSignal(float)
    finished = pyqtSignal()
    error = pyqtSignal(str)

    def __init__(self, url, format_id, output_path):
        super().__init__()
        self.url = url
        self.format_id = format_id
        self.output_path = output_path
        self.is_cancelled = False

    def run(self):
        try:
            ydl_opts = {
                'format': f'{self.format_id}+bestaudio[ext=m4a]/best',
                'outtmpl': self.output_path,
                'merge_output_format': 'mp4',
                'postprocessor_args': ['-c', 'copy'],
                'quiet': True,
                'no_warnings': True,
                'progress_hooks': [self.progress_hook]
            }

            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                if not self.is_cancelled:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
                    ydl.download([self.url])
                    if not self.is_cancelled:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                        self.finished.emit()
        except Exception as e:
            if not self.is_cancelled:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω—ã
                self.error.emit(str(e))

    def progress_hook(self, d):
        if self.is_cancelled:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            return
            
        if d['status'] == 'downloading':
            total_bytes = d.get('total_bytes') or d.get('total_bytes_estimate', 0)
            downloaded_bytes = d.get('downloaded_bytes', 0)
            
            if total_bytes > 0:
                progress = (downloaded_bytes / total_bytes) * 100
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ 100%
                progress = min(progress, 100)
                self.progress.emit(progress / 100)
        
        elif d['status'] == 'finished':
            self.progress.emit(1.0)

    def cancel(self):
        self.is_cancelled = True
        self.terminate()
        self.wait()

def sanitize_filename(filename):
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    return filename[:200]  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

class VideoInfoWidget(QFrame):
    def __init__(self, format_info, parent=None):
        super().__init__(parent)
        self.format_info = format_info
        self.setup_ui()

    def setup_ui(self):
        self.setFrameShape(QFrame.Shape.StyledPanel)
        self.setFixedSize(240, 240)  # –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
        self.setStyleSheet("""
            QFrame {
                background-color: #1e1e1e;
                border-radius: 12px;
                padding: 20px 24px;
                margin: 0px;
            }
            QLabel {
                color: #FFFFFF;
                padding: 0px;
                margin: 0px;
            }
            QLabel.title {
                color: white;
                font-size: 20px;
                font-weight: 600;
            }
            QLabel.format {
                color: #999999;
                font-size: 13px;
                font-weight: 400;
            }
            QLabel.info {
                color: #CCCCCC;
                font-size: 14px;
                font-weight: 400;
            }
            QPushButton {
                background-color: #1DB954;
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 600;
                padding: 10px 0;
                margin-top: 18px;
            }
            QPushButton:hover {
                background-color: #17a74a;
            }
        """)

        main_layout = QVBoxLayout()
        main_layout.setSpacing(4)  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        main_layout.setContentsMargins(24, 20, 24, 20)  # –û—Ç—Å—Ç—É–ø—ã –∫–∞–∫ –≤ –¥–∏–∑–∞–π–Ω–µ
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        height = self.format_info.get('height', '?')
        resolution_text = f"{height}p"
        title_label = QLabel("üé• " + resolution_text)
        title_label.setProperty("class", "title")

        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        filesize = self.format_info.get('filesize', 0)
        filesize_approx = self.format_info.get('filesize_approx', 0)
        tbr = self.format_info.get('tbr', 0)
        duration = self.format_info.get('duration', 0)
        
        if filesize > 0:
            size_text = f"üìÅ {filesize / (1024*1024):.1f} MB"
        elif filesize_approx > 0:
            size_text = f"üìÅ {filesize_approx / (1024*1024):.1f} MB"
        elif tbr > 0 and duration > 0:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∏—Ç—Ä–µ–π—Ç –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä
            estimated_size = (tbr * 1024 * duration) / (8 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–ë
            size_text = f"üìÅ {estimated_size:.1f} MB"
        else:
            size_text = "üìÅ –†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        size_label = QLabel(size_text)
        size_label.setProperty("class", "info")
        
        # –†–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ
        width = self.format_info.get('width', 0)
        height = self.format_info.get('height', 0)
        if width and height:
            dimensions_text = f"üìê {width}x{height}"
        else:
            dimensions_text = "üìê –†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        dimensions_label = QLabel(dimensions_text)
        dimensions_label.setProperty("class", "info")
        
        # –ê—É–¥–∏–æ–∫–æ–¥–µ–∫
        acodec = self.format_info.get('acodec', 'none')
        if acodec != 'none':
            if acodec == 'mp4a.40.2':
                acodec = 'AAC'
            elif acodec == 'opus':
                acodec = 'Opus'
            audio_text = f"üîä {acodec}"
        else:
            audio_text = "üîá –ë–µ–∑ –∑–≤—É–∫–∞"
        audio_label = QLabel(audio_text)
        audio_label.setProperty("class", "info")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ layout
        main_layout.addWidget(title_label)
        main_layout.addSpacing(12)  # –û—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
        main_layout.addWidget(size_label)
        main_layout.addWidget(dimensions_label)
        main_layout.addWidget(audio_label)
        main_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_btn = QPushButton("‚¨á –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
        download_btn.clicked.connect(self.start_download)
        main_layout.addWidget(download_btn)
        
        self.setLayout(main_layout)

    def start_download(self):
        main_window = None
        parent = self.parent()
        while parent is not None:
            if isinstance(parent, MainWindow):  # Changed from YouTubeDownloader to MainWindow
                main_window = parent
                break
            parent = parent.parent()
        
        if main_window:
            main_window.start_download(self.format_info)

class ThumbnailLoader(QThread):
    thumbnail_loaded = pyqtSignal(QPixmap)
    
    def __init__(self, url):
        super().__init__()
        self.url = url
        
    def run(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–≤—å—é
            temp_path = "temp_thumbnail.jpg"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            urllib.request.urlretrieve(self.url, temp_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ QPixmap
            pixmap = QPixmap(temp_path)
            if not pixmap.isNull():
                self.thumbnail_loaded.emit(pixmap)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.remove(temp_path)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é: {str(e)}")

class VideoInfoHeader(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.thumbnail_loader = None
        self.setup_ui()
        
    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 0, 0, 0)  # –û—Ç—Å—Ç—É–ø—ã: –ª–µ–≤—ã–π 20px, –≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π 16px, –ø—Ä–∞–≤—ã–π 0px
        main_layout.setSpacing(20)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_card = QFrame()
        info_card.setFixedSize(930, 210)
        info_card.setStyleSheet("""
            QFrame {
                background-color: #2A2A2A;
                border-radius: 12px;
            }
            QLabel {
                color: #FFFFFF;
                font-size: 14px;
                background: transparent;
            }
            QLabel.title {
                font-size: 20px;
                font-weight: 600;
            }
        """)
        
        card_layout = QVBoxLayout(info_card)
        card_layout.setContentsMargins(20, 20, 20, 20)
        card_layout.setSpacing(15)
        
        # –ü—Ä–µ–≤—å—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        top_layout = QHBoxLayout()
        top_layout.setSpacing(20)
        
        # –ü—Ä–µ–≤—å—é
        preview_container = QFrame()
        preview_container.setStyleSheet("""
            QFrame {
                background-color: #404040;
                border-radius: 8px;
            }
        """)
        preview_container.setFixedSize(303, 170)
        preview_layout = QVBoxLayout(preview_container)
        preview_layout.setContentsMargins(0, 0, 0, 0)
        preview_layout.setSpacing(0)
        
        self.preview = QLabel()
        self.preview.setFixedSize(303, 170)
        self.preview.setScaledContents(True)
        preview_layout.addWidget(self.preview)
        
        top_layout.addWidget(preview_container)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø—Ä–µ–≤—å—é
        info_layout = QVBoxLayout()
        info_layout.setSpacing(12)
        info_layout.setContentsMargins(20, 0, 0, 0)  # –û—Ç—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å–ª–µ–≤–∞
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        self.title = QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ")
        self.title.setProperty("class", "title")
        self.title.setWordWrap(True)
        info_layout.addWidget(self.title)
        
        # –°–µ—Ç–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        grid_layout = QGridLayout()
        grid_layout.setSpacing(12)
        grid_layout.setVerticalSpacing(8)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        self.author_label = QLabel("üë§ –ê–≤—Ç–æ—Ä")
        self.views_label = QLabel("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        self.subscribers_label = QLabel("üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        
        grid_layout.addWidget(self.author_label, 0, 0)
        grid_layout.addWidget(self.views_label, 1, 0)
        grid_layout.addWidget(self.subscribers_label, 2, 0)
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        self.likes_label = QLabel("üëç –õ–∞–π–∫–æ–≤")
        self.duration_label = QLabel("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        self.date_label = QLabel("üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        grid_layout.addWidget(self.likes_label, 0, 2)
        grid_layout.addWidget(self.duration_label, 1, 2)
        grid_layout.addWidget(self.date_label, 2, 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ—Ä–∫–∏ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
        grid_layout.setColumnMinimumWidth(1, 100)
        grid_layout.setColumnStretch(1, 1)
        grid_layout.setColumnStretch(3, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è –≤–∏–¥–∂–µ—Ç —Å–≤–µ—Ä—Ö—É
        spacer_top = QWidget()
        spacer_top.setFixedHeight(0)
        info_layout.insertWidget(0, spacer_top)
        info_layout.setStretch(0, 1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Å–ø–µ–π—Å–µ—Ä
        
        info_layout.addLayout(grid_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è –≤–∏–¥–∂–µ—Ç —Å–Ω–∏–∑—É
        spacer_bottom = QWidget()
        spacer_bottom.setFixedHeight(0)
        info_layout.addWidget(spacer_bottom)
        info_layout.setStretch(4, 1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π —Å–ø–µ–π—Å–µ—Ä
        
        top_layout.addLayout(info_layout)
        card_layout.addLayout(top_layout)
        
        main_layout.addWidget(info_card)
    
    def update_info(self, info):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
        if not info:
            return
            
        self.title.setText(info.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
        def format_number(num):
            if num >= 1000000:
                return f"{num/1000000:.1f}M"
            elif num >= 1000:
                return f"{num/1000:.1f}K"
            return str(num)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.author_label.setText(f"üë§ {info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        self.views_label.setText(f"üëÅÔ∏è {format_number(info.get('view_count', 0))}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ TikTok –≤–∏–¥–µ–æ
        is_tiktok = 'tiktok.com' in info.get('webpage_url', '').lower()
        
        if is_tiktok:
            # –î–ª—è TikTok –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ
            width = info.get('width', 0)
            height = info.get('height', 0)
            if width and height:
                dimensions_text = f"üìê {width}x{height}"
            else:
                dimensions_text = "üìê –†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            dimensions_label = QLabel(dimensions_text)
            dimensions_label.setProperty("class", "info")
        else:
            # –î–ª—è YouTube –ø–æ–∫–∞–∑—ã–≤–∞–µ–º FPS
            fps = info.get('fps', 0)
            fps_text = f"üéûÔ∏è {fps} FPS" if fps else "üéûÔ∏è FPS –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            dimensions_label = QLabel(fps_text)
            dimensions_label.setProperty("class", "info")
        
        self.likes_label.setText(f"üëç {format_number(info.get('like_count', 0))}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        duration = info.get('duration', 0)
        minutes = int(duration // 60)
        seconds = int(duration % 60)
        duration_str = f"{minutes}:{seconds:02d}"
        self.duration_label.setText(f"‚è±Ô∏è {duration_str}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        upload_date = info.get('upload_date', '')
        if upload_date and len(upload_date) == 8:
            year = upload_date[:4]
            month = upload_date[4:6]
            day = upload_date[6:]
            self.date_label.setText(f"üìÖ {day}.{month}.{year}")
        else:
            self.date_label.setText("üìÖ –î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é
        if is_tiktok:
            # –î–ª—è TikTok –∏—Å–ø–æ–ª—å–∑—É–µ–º thumbnail –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            thumbnails = info.get('thumbnails', [])
            if thumbnails:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π thumbnail (–æ–±—ã—á–Ω–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
                thumbnail_url = thumbnails[-1].get('url')
                if thumbnail_url:
                    if self.thumbnail_loader is not None:
                        self.thumbnail_loader.quit()
                    self.thumbnail_loader = ThumbnailLoader(thumbnail_url)
                    self.thumbnail_loader.thumbnail_loaded.connect(self.set_thumbnail)
                    self.thumbnail_loader.start()
        else:
            # –î–ª—è YouTube –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            if 'id' in info:
                video_id = info['id']
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–µ–≤—å—é
                thumbnail_urls = [
                    f"https://i.ytimg.com/vi/{video_id}/maxresdefault.jpg",
                    f"https://i.ytimg.com/vi/{video_id}/hqdefault.jpg",
                    f"https://i.ytimg.com/vi/{video_id}/mqdefault.jpg"
                ]
                
                if self.thumbnail_loader is not None:
                    self.thumbnail_loader.quit()
                self.thumbnail_loader = ThumbnailLoader(thumbnail_urls[0])  # –ù–∞—á–∏–Ω–∞–µ–º —Å maxresdefault
                self.thumbnail_loader.thumbnail_loaded.connect(self.set_thumbnail)
                self.thumbnail_loader.start()
    
    def set_thumbnail(self, pixmap):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é"""
        if not pixmap.isNull():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π pixmap —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
            rounded_pixmap = QPixmap(self.preview.size())
            rounded_pixmap.fill(Qt.GlobalColor.transparent)
            
            painter = QPainter(rounded_pixmap)
            painter.setRenderHint(QPainter.RenderHint.Antialiasing)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
            path = QPainterPath()
            path.addRoundedRect(0, 0, self.preview.width(), self.preview.height(), 8, 8)
            
            # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–∞—Å–∫–æ–π
            painter.setClipPath(path)
            painter.drawPixmap(0, 0, pixmap.scaled(
                self.preview.size(),
                Qt.AspectRatioMode.KeepAspectRatioByExpanding,
                Qt.TransformationMode.SmoothTransformation
            ))
            painter.end()
            
            self.preview.setPixmap(rounded_pixmap)
            print("\n–ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Video Downloader")  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.setWindowIcon(QIcon("assets/icons/icon.ico"))
        self.setMinimumSize(1000, 800)
        self.setFixedWidth(1000)  # –§–∏–∫—Å–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.current_url = ""
        self.search_thread = None
        self.download_thread = None
        self.current_video_info = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 20, 20, 20)
        main_layout.setSpacing(16)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π
        top_panel = QHBoxLayout()
        top_panel.setContentsMargins(20, 0, 0, 0)
        top_panel.setSpacing(16)
        
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ —Å YouTube, TikTok –∏–ª–∏ Instagram")
        self.url_input.returnPressed.connect(self.search_video)
        
        self.search_button = SearchButton()
        self.search_button.clicked.connect(self.search_video)
        self.search_button.setFixedWidth(120)
        
        top_panel.addWidget(self.url_input)
        top_panel.addWidget(self.search_button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
        self.video_info_header = VideoInfoHeader()
        self.video_info_header.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        
        self.content_widget = QWidget()
        self.content_layout = QGridLayout(self.content_widget)
        self.content_layout.setSpacing(16)
        self.content_layout.setContentsMargins(20, 0, 20, 20)
        self.scroll_area.setWidget(self.content_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout.addLayout(top_panel)
        main_layout.addWidget(self.video_info_header)
        main_layout.addWidget(self.scroll_area, 1)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.setupStatusBar()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.apply_styles()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.showStatusMessage("–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")

    def setupStatusBar(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.statusBar().setFixedHeight(50)
        self.statusBar().setStyleSheet("""
            QStatusBar {
                background-color: #2A2A2A;
                color: #FFFFFF;
                padding: 0;
                margin: 0;
            }
            QStatusBar::item {
                border: none;
                padding: 0;
                margin: 0;
                border-spacing: 0;
            }
            QPushButton {
                height: 35px;
                min-height: 35px;
                max-height: 35px;
            }
        """)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
        self.status_widget = QWidget()
        self.status_layout = QHBoxLayout(self.status_widget)
        self.status_layout.setContentsMargins(0, 0, 20, 0)  # –¢–æ–ª—å–∫–æ –ø—Ä–∞–≤—ã–π –æ—Ç—Å—Ç—É–ø
        self.status_layout.setSpacing(16)  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setFixedHeight(30)
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setMaximum(10000)
        self.progress_bar.hide()
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                background-color: #404040;
                border: none;
                border-radius: 4px;
                text-align: center;
                color: white;
                font-size: 13px;
                margin: 0;
                padding: 0;
            }
            QProgressBar::chunk {
                background-color: #1DB954;
                border-radius: 4px;
            }
        """)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        self.cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_button.setFixedSize(120, 30)
        self.cancel_button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: white;
                border: 1px solid white;
                border-radius: 4px;
                padding: 0;
                margin: 0;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 0.1);
            }
            QPushButton:pressed {
                background-color: rgba(255, 255, 255, 0.2);
            }
        """)
        self.cancel_button.hide()
        self.cancel_button.clicked.connect(self.cancel_download)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ layout
        self.status_layout.addWidget(self.progress_bar, 1)
        self.status_layout.addWidget(self.cancel_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().addPermanentWidget(self.status_widget, 1)

    def apply_styles(self):
        self.setStyleSheet("""
            QMainWindow {
                background-color: #323232;
            }
            QWidget {
                color: #FFFFFF;
                font-family: Arial;
            }
            QLineEdit {
                padding: 8px 16px 8px 10px;  /* top right bottom left */
                border: 1px solid #404040;
                border-radius: 4px;
                background-color: #2A2A2A;
                color: #FFFFFF;
            }
            QPushButton {
                background-color: #1DB954;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                color: white;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1ed760;
            }
            QPushButton:pressed {
                background-color: #1aa34a;
            }
            QPushButton:disabled {
                background-color: #404040;
            }
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QProgressBar {
                border: 1px solid #404040;
                border-radius: 4px;
                text-align: center;
                background-color: #2A2A2A;
            }
            QProgressBar::chunk {
                background-color: #1DB954;
                border-radius: 3px;
            }
            QScrollBar:vertical {
                background-color: #323232;
                width: 10px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background-color: #404040;
                min-height: 30px;
                border-radius: 5px;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                background: none;
            }
        """)

    def search_video(self):
        url = self.url_input.text().strip()
        if not url:
            error_label = QLabel("–í—Å—Ç–∞–≤—å—Ç–µ URL –≤–∏–¥–µ–æ —Å YouTube, TikTok –∏–ª–∏ Instagram")
            error_label.setStyleSheet("""
                QLabel {
                    color: white;
                    font-size: 16px;
                }
            """)
            error_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            for i in reversed(range(self.content_layout.count())): 
                widget = self.content_layout.itemAt(i).widget()
                if widget:
                    widget.deleteLater()
            self.content_layout.addWidget(error_label, 0, 0, 1, 4, Qt.AlignmentFlag.AlignCenter)
            return
            
        if not validate_url(url):
            error_label = QLabel("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è YouTube, TikTok –∏ Instagram.")
            error_label.setStyleSheet("""
                QLabel {
                    color: white;
                    font-size: 16px;
                }
            """)
            error_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            for i in reversed(range(self.content_layout.count())): 
                widget = self.content_layout.itemAt(i).widget()
                if widget:
                    widget.deleteLater()
            self.content_layout.addWidget(error_label, 0, 0, 1, 4, Qt.AlignmentFlag.AlignCenter)
            return

        self.current_url = url
        self.disable_interface()
        self.search_button.startLoading()
        self.showStatusMessage("–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ...")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i in reversed(range(self.content_layout.count())): 
            widget = self.content_layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()
        
        self.search_thread = SearchThread(url)
        self.search_thread.finished.connect(self.on_search_complete)
        self.search_thread.error.connect(self.on_search_error)
        self.search_thread.start()

    def on_search_complete(self, info):
        self.current_video_info = info
        self.search_button.stopLoading()
        self.enable_interface()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —à–∞–ø–∫–µ
        self.video_info_header.update_info(info)
        self.video_info_header.show()
        
        print("\n–ü—Ä–µ–≤—å—é (thumbnails):")
        if 'thumbnails' in info:
            print(json.dumps(info['thumbnails'], indent=2, ensure_ascii=False))
        else:
            print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–≤—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        print("\n–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:")
        print(json.dumps(info, indent=2, ensure_ascii=False))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
        formats = []
        for f in info.get('formats', []):
            if f.get('ext') == 'mp4' and f.get('vcodec') and f.get('vcodec') != 'none':
                formats.append(f)
        
        formats.sort(key=lambda x: (
            -int(x.get('quality', 0) or 0),
            -float(x.get('tbr', 0) or 0),
            -(int(x.get('filesize', 0) or 0) if x.get('filesize') is not None else 0),
            -(int(x.get('filesize_approx', 0) or 0) if x.get('filesize_approx') is not None else 0)
        ))
        
        if not formats:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö MP4 —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            self.showStatusMessage("–ì–æ—Ç–æ–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ —Å–µ—Ç–∫–µ 4 —Å—Ç–æ–ª–±—Ü–∞
        row = 0
        col = 0
        for fmt in formats:
            format_card = self.create_format_card(fmt)
            self.content_layout.addWidget(format_card, row, col)
            col += 1
            if col >= 4:  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ 4 –∫–∞—Ä—Ç–æ—á–µ–∫
                col = 0
                row += 1
            
        self.showStatusMessage(f"–ù–∞–π–¥–µ–Ω–æ {len(formats)} —Ñ–æ—Ä–º–∞—Ç–æ–≤")

    def create_format_card(self, fmt):
        card = QFrame()
        card.setFrameStyle(QFrame.Shape.StyledPanel)
        card.setFixedSize(220, 208)
        card.setStyleSheet("""
            QFrame {
                background-color: #2A2A2A;
                border-radius: 12px;
                padding: 0;
                margin: 0;
            }
            QLabel {
                color: #FFFFFF;
                padding: 0;
                margin: 0;
                line-height: 1;
            }
            QLabel.title {
                color: white;
                font-size: 24px;
                font-weight: 600;
            }
            QLabel.subtitle {
                color: #999999;
                font-size: 14px;
                font-weight: 400;
            }
            QLabel.info {
                color: #CCCCCC;
                font-size: 14px;
                font-weight: 400;
            }
            QPushButton {
                background-color: #1DB954;
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 600;
                padding: 0;
                margin: 0;
                height: 35px;
                min-height: 35px;
                max-height: 35px;
            }
            QPushButton:hover {
                background-color: #17a74a;
            }
        """)
        
        main_layout = QVBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_container = QWidget()
        info_layout = QVBoxLayout(info_container)
        info_layout.setSpacing(0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        info_layout.setContentsMargins(0, 0, 0, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        height = fmt.get('height', 0)
        resolution = f"{height}p" if height else "?"
        title_label = QLabel(f"üé• {resolution}")
        title_label.setProperty("class", "title")
        
        # –§–æ—Ä–º–∞—Ç –∏ –∫–æ–¥–µ–∫ –∫–∞–∫ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        vcodec = fmt.get('vcodec', 'unknown').split('.')[0]
        if vcodec == 'avc1':
            vcodec = 'h264'
        elif vcodec == 'vp09':
            vcodec = 'vp09'
        format_text = f"MP4 ({vcodec})"
        format_label = QLabel(format_text)
        format_label.setProperty("class", "subtitle")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        info_layout.addWidget(title_label)
        info_layout.addSpacing(1)  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–æ–º
        info_layout.addWidget(format_label)
        info_layout.addSpacing(4)  # –û—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫ (—Ä–∞–∑–º–µ—Ä, FPS, –±–∏—Ç—Ä–µ–π—Ç)
        metrics_container = QWidget()
        metrics_layout = QVBoxLayout(metrics_container)
        metrics_layout.setSpacing(1)  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        metrics_layout.setContentsMargins(0, 0, 0, 0)
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        filesize = fmt.get('filesize')
        filesize_approx = fmt.get('filesize_approx')
        if filesize is not None and filesize > 0:
            size_text = f"üìÅ {filesize / (1024*1024):.1f} MB"
        elif filesize_approx is not None and filesize_approx > 0:
            size_text = f"üìÅ {filesize_approx / (1024*1024):.1f} MB"
        else:
            tbr = fmt.get('tbr', 0)
            duration = self.current_video_info.get('duration', 0)
            if tbr > 0 and duration > 0:
                compression_factor = 0.5
                estimated_size = (tbr * 1024 * duration * compression_factor) / (8 * 1024 * 1024)
                size_text = f"üìÅ {estimated_size:.1f} MB"
            else:
                size_text = "üìÅ –†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        size_label = QLabel(size_text)
        size_label.setProperty("class", "info")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∏–¥–µ–æ
        webpage_url = self.current_video_info.get('webpage_url', '').lower()
        is_tiktok = 'tiktok.com' in webpage_url
        is_instagram = 'instagram.com' in webpage_url
        
        if is_tiktok or is_instagram:
            # –î–ª—è TikTok –∏ Instagram –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ
            width = fmt.get('width', 0)
            height = fmt.get('height', 0)
            if width and height:
                dimensions_text = f"üìê {width}x{height}"
            else:
                dimensions_text = "üìê –†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            dimensions_label = QLabel(dimensions_text)
            dimensions_label.setProperty("class", "info")
        else:
            # –î–ª—è YouTube –ø–æ–∫–∞–∑—ã–≤–∞–µ–º FPS
            fps = fmt.get('fps', 0)
            fps_text = f"üéûÔ∏è {fps} FPS" if fps else "üéûÔ∏è FPS –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            dimensions_label = QLabel(fps_text)
            dimensions_label.setProperty("class", "info")
        
        # –ë–∏—Ç—Ä–µ–π—Ç (–º–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ üì∂)
        tbr = fmt.get('tbr', 0)
        if tbr > 0:
            bitrate_text = f"üì∂ {tbr:.0f} Kbps"
        else:
            bitrate_text = "üì∂ –ë–∏—Ç—Ä–µ–π—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        bitrate_label = QLabel(bitrate_text)
        bitrate_label.setProperty("class", "info")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics_layout.addWidget(size_label)
        metrics_layout.addWidget(dimensions_label)
        metrics_layout.addWidget(bitrate_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        info_layout.addWidget(metrics_container)
        info_layout.addStretch()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout.addWidget(info_container)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_btn = QPushButton("‚¨á –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
        download_btn.setFixedHeight(35)
        download_btn.clicked.connect(lambda: self.start_download(fmt))
        main_layout.addWidget(download_btn)
        
        card.setLayout(main_layout)
        return card

    def start_download(self, fmt):
        if not self.current_video_info:
            return
            
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        title = self.current_video_info.get('title', 'video')
        safe_title = sanitize_filename(title)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ",
            os.path.join(os.path.expanduser('~'), 'Desktop', f"{safe_title}.mp4"),
            "MP4 Files (*.mp4)"
        )
        
        if not file_path:
            return
            
        self.disable_interface()
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar.setValue(0)
        self.progress_bar.hide()
        self.cancel_button.hide()
        self.showStatusMessage("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")
        
        self.download_thread = DownloadThread(
            self.current_url,
            fmt['format_id'],
            file_path
        )
        self.download_thread.progress.connect(self.update_progress)
        self.download_thread.finished.connect(self.on_download_complete)
        self.download_thread.error.connect(self.on_download_error)
        self.download_thread.start()

    def update_progress(self, progress):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.download_thread.is_cancelled:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            return
            
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
        if not self.progress_bar.isVisible():
            self.showStatusMessage("–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...")
            self.progress_bar.setValue(0)
            self.progress_bar.show()
            self.cancel_button.show()
            self.status_widget.show()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (progress –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1)
        current_value = self.progress_bar.value()
        new_value = int(progress * 10000)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
        if new_value > current_value:
            self.progress_bar.setValue(new_value)
            self.progress_bar.setFormat(f"{progress * 100:.2f}%")

    def on_download_complete(self):
        self.progress_bar.hide()
        self.cancel_button.hide()
        self.enable_interface()
        self.showStatusMessage("–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ")

    def on_search_error(self, error_msg):
        self.search_button.stopLoading()
        self.enable_interface()
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        error_label = QLabel("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        error_label.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 16px;
            }
        """)
        error_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤ —Ü–µ–Ω—Ç—Ä content_layout
        self.content_layout.addWidget(error_label, 0, 0, 1, 4, Qt.AlignmentFlag.AlignCenter)

    def on_download_error(self, error_msg):
        self.progress_bar.hide()
        self.cancel_button.hide()
        self.enable_interface()
        self.showStatusMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ:\n{error_msg}")

    def disable_interface(self):
        self.url_input.setEnabled(False)
        self.search_button.setEnabled(False)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        for i in range(self.content_layout.count()):
            widget = self.content_layout.itemAt(i).widget()
            if isinstance(widget, QFrame):
                for child in widget.findChildren(QPushButton):
                    child.setEnabled(False)

    def enable_interface(self):
        self.url_input.setEnabled(True)
        self.search_button.setEnabled(True)
        
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        for i in range(self.content_layout.count()):
            widget = self.content_layout.itemAt(i).widget()
            if isinstance(widget, QFrame):
                for child in widget.findChildren(QPushButton):
                    child.setEnabled(True)

    def cancel_download(self):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.download_thread and self.download_thread.isRunning():
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            self.cancel_button.setEnabled(False)
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            self.download_thread.cancel()
            
            # –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.progress_bar.setValue(0)
            self.progress_bar.hide()
            self.cancel_button.hide()
            self.enable_interface()
            self.showStatusMessage("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            self.cancel_button.setEnabled(True)

    def showStatusMessage(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ"""
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.statusBar().clearMessage()
        for child in self.statusBar().findChildren(QLabel):
            if child is not self.status_widget:
                child.deleteLater()

        # –°–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        label = QLabel(message)
        label.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 13px;
                margin: 0;
                padding: 0;
                background: transparent;
            }
        """)
        label.setContentsMargins(20, 0, 0, 0)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().addWidget(label)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–∏–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if self.progress_bar.isVisible():
            spacer = QWidget()
            spacer.setFixedWidth(16)
            spacer.setStyleSheet("background: transparent; margin: 0; padding: 0; border: none;")
            self.statusBar().addWidget(spacer)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())